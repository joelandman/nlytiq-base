### nlytiq compiler config

### compilers
# set variable to 1 to use.  Only one can be used at a time
# FreeBSD 11.x uses clang by default, and it is built in.
ifneq ($(OS), FreeBSD)
#### set here!
GCC     = 1
CLANG   = 0
####

else
GCC     = 0
CLANG   = 1
endif


### set which compiler version and path you wish to use if you
### 

ifeq ($(OS),Linux)
# GCC by default, should be in the default path.  Change this if you need
GCC_PATH	=
GCC_VER		=
# example
#  GCC-6.3 installed in /opt/gcc/6.3/bin/gcc-6
#  GCC_PATH        = /opt/gcc/6.3/bin/
#  GCC_VER	   = -6
#
# note the trailing slash.  You *MUST* have it, or this will
# break
#

else ifeq ($(OS),Darwin)
# MacOS:  by default gcc is aliased to clang at /usr/bin/gcc
# 
#GCC_PATH	=
#GCC_VER	=
GCC_PATH        = /usr/local/bin/
GCC_VER         = -6

# Don't use gcc-5 or higher for Python right now, as it does break
# compilation of modules.  Forced down to default gcc in Makefile.python
#
# using homebrew gcc-5
# GCC_PATH	= /usr/local/bin/
# GCC_VER	= -5
#
# using homebrew gcc-6
# GCC_PATH      = /usr/local/bin/
# GCC_VER       = -6
# 


else ifeq ($(OS),FreeBSD)
# FreeBSD is nice.  Build largely just works, though there
# are some oddities on Fortran compilation for Julia.
#
GCC_PATH        = /usr/local/bin/
GCC_VER         = 6


else ifeq ($(OS),SunOS)
# Illumos (SmartOS, OI-Hipster)
# Currently few of the tools compile correctly.  Some of this is due
# to header issues, or other incompatibilities.  Patches and help
# are welcome here.
#
GCC_PATH        = /usr/local/bin/
GCC_VER         = -5
endif


# sanity check
ifeq ($(GCC),1)
ifeq ($(CLANG),1)
$(error You have both GCC=1 and CLANG=1 in base.config.  Only one or the other can be 1.)
endif
endif

ifeq ($(GCC),0)
ifeq ($(CLANG),0)
$(error You have both GCC=0 and CLANG=0 in base.config.  Only one or the other can be 0.)
endif
endif

# specific compiler config.  Set CC, CXX, CFLAGS, CXFLAGS

ifeq ($(GCC),1)
CC             = ${GCC_PATH}gcc${GCC_VER}
CXX            = ${GCC_PATH}g++${GCC_VER}
CFLAGS         = -fPIC -O3 -malign-double -g
CXXFLAGS       = -fPIC -O3 -malign-double -g	
FC	       = ${GCC_PATH}gfortran{$GCC_VER}
F77	       = ${FC}
ifeq ($(OS),FreeBSD)
LDFLAGS         = -L${GCC_PATH}../lib -Wl,-rpath=${GCC_PATH}../lib/gcc${GCC_VER} -L${GCC_PATH}../lib/gcc${GCC_VER} -B${GCC_PATH}
endif
endif

ifeq ($(CLANG),1)
CLANG_VER 	= ""
ifeq ($(OS),FreeBSD)
CLANG_VER	= 50
endif
_CLP_		= $(shell /usr/bin/which clang${CLANG_VER})
_CLPPP_		= $(shell /usr/bin/which clang++${CLANG_VER})
CC              = ${_CLP_}
CXX             = ${_CLPPP_}

CFLAGS          = -O2  
CXXFLAGS	= -O2
ifeq ($(OS),FreeBSD)
LDFLAGS		= -L${GCC_PATH}../lib -Wl,-rpath=${GCC_PATH}../lib/gcc${GCC_VER} -L${GCC_PATH}../lib/gcc${GCC_VER} -B${GCC_PATH}
endif
endif

# fortran flags: needed for Julia, R, Octave.  Change if using another
# compiler.
FCFLAGS		= -O3 -g
FC		= ${GCC_PATH}gfortran${GCC_VER}

### use locally compiled atlas or not
BUILDATLAS	= 0

