include config/base.config

ATLAS_VER  = 3.10.3
ATLAS_SRC  = atlas${ATLAS_VER}
ATLAS_TAR  = ${ATLAS_SRC}.tar.bz2
ATLAS_DIR  = ATLAS
LAPACK_VER = 3.7.0
LAPACK_SRC = lapack-${LAPACK_VER}
LAPACK_TAR = ${LAPACK_SRC}.tgz

all:    	install-atlas fast-cpus

clean:		clean-atlas  

#### fast-cpus turns off cpu throttling, used as ATLAS pulls
#### timing data from routines, and throttling WILL impact
#### overall performance, rendering the timing data effectively
#### meaningless.  So we need to turn off the CPU throttling for
#### the build for the build to generate fast code.

fast-cpus:
### linux
ifeq ($(OS),Linux)
	# first, force all CPUs into performance mode
	for CPUFREQ in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; \
	 do [ -f $CPUFREQ ] || continue; \
	 echo -n performance > $CPUFREQ; \
	done

	# second force cpufreq-set to lock CPU speed
	for ((i=0; i<$NCPU; i++)) \
	 do  \
		cpufreq-set -g performance -c $i ; \
	 done
endif	
	touch fast-cpus

slow-cpus:
ifeq ($(OS),Linux)
	# first, force all CPUs into ondemand mode
	for CPUFREQ in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; \
	 do [ -f $CPUFREQ ] || continue; \ 
	 echo -n ondemand > $CPUFREQ; \ 
	done

	# second force cpufreq-set to unlock CPU speed
	for ((i=0; i<$NCPU; i++)) \
	 do  \
		cpufreq-set -g ondemand -c $i ; \
	 done
endif
	touch slow-cpus
	


configure-atlas: fast-cpus
	#echo "DESTDIR=${ATLAS_INST_PATH}" >> atlas/Make.user
	tar -jxf sources/${ATLAS_TAR}
	mkdir ${ATLAS_DIR}/build
	cd ${ATLAS_DIR}/build ; ../configure --prefix=${NLYTIQ_INST_PATH} \
		   -b 64 --cc=${CC} --cflags=${CFLAGS} --dylibs	\
		   --with-netlib-lapack-tarfile=../../sources/${LAPACK_TAR}
	touch configure-atlas

make-atlas: configure-atlas fast-cpus
	cd ${ATLAS_DIR}/build ; make  -j${NCPU}
	touch make-atlas

install-atlas: make-atlas slow-cpus
	cd ${ATLAS_DIR}/build ;  make install
	touch install-atlas

clean-atlas:
	rm -rf atlas install-atlas make-atlas configure-atlas ${ATLAS_DIR} slow-cpus fast-cpus
